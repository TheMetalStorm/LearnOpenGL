<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>17.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <ProjectGuid>{1908cd6b-3c51-4c9c-bca1-f5d5d2ec2658}</ProjectGuid>
    <RootNamespace>OpenGL</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    <ProjectName>SimiEng</ProjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <IncludePath>D:\Dev\OpenGL\OpenGL\libraries\include;$(IncludePath)</IncludePath>
    <LibraryPath>D:\Dev\OpenGL\OpenGL\libraries\lib;$(LibraryPath)</LibraryPath>
    <OutDir>$(SolutionDir)bin\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <IncludePath>D:\Dev\LearnOpenGL\ThirdParty\include;$(IncludePath)</IncludePath>
    <LibraryPath>D:\Dev\LearnOpenGL\ThirdParty\lib;$(LibraryPath)</LibraryPath>
    <OutDir>$(SolutionDir)bin\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <OutDir>$(SolutionDir)bin\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <OutDir>$(SolutionDir)bin\$(Configuration)\</OutDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>SIMIENG_DLL_EXPORT;GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(ProjectDir)include;$(ProjectDir)ThirdParty\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <LanguageStandard>Default</LanguageStandard>
      <UndefineAllPreprocessorDefinitions>false</UndefineAllPreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>opengl32.lib;assimp-vc143-mtd.lib;glfw3dll.lib;zlibd.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(ProjectDir)ThirdParty\lib\$(ConfigurationName)</AdditionalLibraryDirectories>
    </Link>
    <PreBuildEvent>
      <Command>
      </Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>@echo off
setlocal enabledelayedexpansion

:: ========================================
:: RELIABLE POST-BUILD COPY SCRIPT FOR VS2022
:: ========================================

:: Debugging - show actual paths being used
echo ProjectDir: $(ProjectDir)
echo OutDir: $(OutDir)
echo ConfigurationName: $(ConfigurationName)

:: Ensure output directory exists
if not exist "$(OutDir)" mkdir "$(OutDir)"

:: Main copy operations
::call :RobocopyWithRetry "$(ProjectDir)Resources" "$(OutDir)Resources" "Resources"
::call :RobocopyWithRetry "$(ProjectDir)ThirdParty\bin\$(ConfigurationName)" "$(ProjectDir)bin\$(ConfigurationName)" "DLLs"

echo Post-build copy completed successfully
exit /b 0

:: ========================================
:: IMPROVED COPY FUNCTION WITH ERROR HANDLING
:: ========================================
:RobocopyWithRetry
set "_source=%~1"
set "_dest=%~2"
set "_name=%~3"

:: Verify source exists
if not exist "!_source!\" (
    echo ERROR: Source folder not found: "!_source!" &gt;&amp;2
    exit /b 1
)

:: Create destination if needed
if not exist "!_dest!\" mkdir "!_dest!"

:: Perform copy with retry
robocopy "!_source!" "!_dest!" /E /NFL /NDL /NJH /NJS /R:1 /W:1 /LOG+:$(OutDir)copy_log.txt
set _result=!ERRORLEVEL!

:: Success cases
if !_result! EQU 0 (
    echo SUCCESS: !_name! - no files needed copying
    goto :EOF
)
if !_result! EQU 1 (
    echo SUCCESS: !_name! copied successfully
    goto :EOF
)

:: Warning cases (2-7)
if !_result! GEQ 2 if !_result! LEQ 7 (
    echo WARNING: !_name! copied with minor issues (code !_result!)
    goto :EOF
)

:: Error cases (&gt;=8)
echo ERROR: Failed to copy !_name! from "!_source!" to "!_dest!" (code !_result!) &gt;&amp;2
type "$(OutDir)copy_log.txt" &gt;&amp;2
exit /b 1</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>SIMIENG_DLL_EXPORT;GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(ProjectDir)include;$(ProjectDir)ThirdParty\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <LanguageStandard>Default</LanguageStandard>
      <UndefineAllPreprocessorDefinitions>false</UndefineAllPreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(ProjectDir)ThirdParty\lib\$(ConfigurationName)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;assimp-vc143-mt.lib;glfw3dll.lib;zlib.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>
      </Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>@echo off
setlocal enabledelayedexpansion

:: ========================================
:: RELIABLE POST-BUILD COPY SCRIPT FOR VS2022
:: ========================================

:: Debugging - show actual paths being used
echo ProjectDir: $(ProjectDir)
echo OutDir: $(OutDir)
echo ConfigurationName: $(ConfigurationName)

:: Ensure output directory exists
if not exist "$(OutDir)" mkdir "$(OutDir)"

:: Main copy operations
::call :RobocopyWithRetry "$(ProjectDir)Resources" "$(OutDir)Resources" "Resources"
::call :RobocopyWithRetry "$(ProjectDir)ThirdParty\bin\$(ConfigurationName)" "$(ProjectDir)bin\$(ConfigurationName)" "DLLs"

echo Post-build copy completed successfully
exit /b 0

:: ========================================
:: IMPROVED COPY FUNCTION WITH ERROR HANDLING
:: ========================================
:RobocopyWithRetry
set "_source=%~1"
set "_dest=%~2"
set "_name=%~3"

:: Verify source exists
if not exist "!_source!\" (
    echo ERROR: Source folder not found: "!_source!" &gt;&amp;2
    exit /b 1
)

:: Create destination if needed
if not exist "!_dest!\" mkdir "!_dest!"

:: Perform copy with retry
robocopy "!_source!" "!_dest!" /E /NFL /NDL /NJH /NJS /R:1 /W:1 /LOG+:$(OutDir)copy_log.txt
set _result=!ERRORLEVEL!

:: Success cases
if !_result! EQU 0 (
    echo SUCCESS: !_name! - no files needed copying
    goto :EOF
)
if !_result! EQU 1 (
    echo SUCCESS: !_name! copied successfully
    goto :EOF
)

:: Warning cases (2-7)
if !_result! GEQ 2 if !_result! LEQ 7 (
    echo WARNING: !_name! copied with minor issues (code !_result!)
    goto :EOF
)

:: Error cases (&gt;=8)
echo ERROR: Failed to copy !_name! from "!_source!" to "!_dest!" (code !_result!) &gt;&amp;2
type "$(OutDir)copy_log.txt" &gt;&amp;2
exit /b 1</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>SIMIENG_DLL_EXPORT;GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(ProjectDir)include;$(ProjectDir)ThirdParty\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <LanguageStandard>Default</LanguageStandard>
      <UndefineAllPreprocessorDefinitions>false</UndefineAllPreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>opengl32.lib;assimp-vc143-mtd.lib;glfw3dll.lib;zlibd.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(ProjectDir)ThirdParty\lib\$(ConfigurationName)</AdditionalLibraryDirectories>
    </Link>
    <PreBuildEvent>
      <Command>
      </Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>@echo off
setlocal enabledelayedexpansion

:: ========================================
:: RELIABLE POST-BUILD COPY SCRIPT FOR VS2022
:: ========================================

:: Debugging - show actual paths being used
echo ProjectDir: $(ProjectDir)
echo OutDir: $(OutDir)
echo ConfigurationName: $(ConfigurationName)

:: Ensure output directory exists
if not exist "$(OutDir)" mkdir "$(OutDir)"

:: Main copy operations
::call :RobocopyWithRetry "$(ProjectDir)Resources" "$(OutDir)Resources" "Resources"
::call :RobocopyWithRetry "$(ProjectDir)ThirdParty\bin\$(ConfigurationName)" "$(ProjectDir)bin\$(ConfigurationName)" "DLLs"

echo Post-build copy completed successfully
exit /b 0

:: ========================================
:: IMPROVED COPY FUNCTION WITH ERROR HANDLING
:: ========================================
:RobocopyWithRetry
set "_source=%~1"
set "_dest=%~2"
set "_name=%~3"

:: Verify source exists
if not exist "!_source!\" (
    echo ERROR: Source folder not found: "!_source!" &gt;&amp;2
    exit /b 1
)

:: Create destination if needed
if not exist "!_dest!\" mkdir "!_dest!"

:: Perform copy with retry
robocopy "!_source!" "!_dest!" /E /NFL /NDL /NJH /NJS /R:1 /W:1 /LOG+:$(OutDir)copy_log.txt
set _result=!ERRORLEVEL!

:: Success cases
if !_result! EQU 0 (
    echo SUCCESS: !_name! - no files needed copying
    goto :EOF
)
if !_result! EQU 1 (
    echo SUCCESS: !_name! copied successfully
    goto :EOF
)

:: Warning cases (2-7)
if !_result! GEQ 2 if !_result! LEQ 7 (
    echo WARNING: !_name! copied with minor issues (code !_result!)
    goto :EOF
)

:: Error cases (&gt;=8)
echo ERROR: Failed to copy !_name! from "!_source!" to "!_dest!" (code !_result!) &gt;&amp;2
type "$(OutDir)copy_log.txt" &gt;&amp;2
exit /b 1</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>SIMIENG_DLL_EXPORT;GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <AdditionalIncludeDirectories>$(ProjectDir)include;$(ProjectDir)ThirdParty\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <LanguageStandard>Default</LanguageStandard>
      <UndefineAllPreprocessorDefinitions>false</UndefineAllPreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalLibraryDirectories>$(ProjectDir)ThirdParty\lib\$(ConfigurationName)</AdditionalLibraryDirectories>
      <AdditionalDependencies>opengl32.lib;assimp-vc143-mt.lib;glfw3dll.lib;zlib.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>
      </Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>@echo off
setlocal enabledelayedexpansion

:: ========================================
:: RELIABLE POST-BUILD COPY SCRIPT FOR VS2022
:: ========================================

:: Debugging - show actual paths being used
echo ProjectDir: $(ProjectDir)
echo OutDir: $(OutDir)
echo ConfigurationName: $(ConfigurationName)

:: Ensure output directory exists
if not exist "$(OutDir)" mkdir "$(OutDir)"

:: Main copy operations
::call :RobocopyWithRetry "$(ProjectDir)Resources" "$(OutDir)Resources" "Resources"
::call :RobocopyWithRetry "$(ProjectDir)ThirdParty\bin\$(ConfigurationName)" "$(ProjectDir)bin\$(ConfigurationName)" "DLLs"

echo Post-build copy completed successfully
exit /b 0

:: ========================================
:: IMPROVED COPY FUNCTION WITH ERROR HANDLING
:: ========================================
:RobocopyWithRetry
set "_source=%~1"
set "_dest=%~2"
set "_name=%~3"

:: Verify source exists
if not exist "!_source!\" (
    echo ERROR: Source folder not found: "!_source!" &gt;&amp;2
    exit /b 1
)

:: Create destination if needed
if not exist "!_dest!\" mkdir "!_dest!"

:: Perform copy with retry
robocopy "!_source!" "!_dest!" /E /NFL /NDL /NJH /NJS /R:1 /W:1 /LOG+:$(OutDir)copy_log.txt
set _result=!ERRORLEVEL!

:: Success cases
if !_result! EQU 0 (
    echo SUCCESS: !_name! - no files needed copying
    goto :EOF
)
if !_result! EQU 1 (
    echo SUCCESS: !_name! copied successfully
    goto :EOF
)

:: Warning cases (2-7)
if !_result! GEQ 2 if !_result! LEQ 7 (
    echo WARNING: !_name! copied with minor issues (code !_result!)
    goto :EOF
)

:: Error cases (&gt;=8)
echo ERROR: Failed to copy !_name! from "!_source!" to "!_dest!" (code !_result!) &gt;&amp;2
type "$(OutDir)copy_log.txt" &gt;&amp;2
exit /b 1</Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="src\Camera.cpp" />
    <ClCompile Include="src\DirLight.cpp" />
    <ClCompile Include="src\FPSCam.cpp" />
    <ClCompile Include="src\glad.c" />
    <ClCompile Include="src\Mesh.cpp" />
    <ClCompile Include="src\Model.cpp" />
    <ClCompile Include="src\PointLight.cpp" />
    <ClCompile Include="src\Shader.cpp" />
    <ClCompile Include="src\SimiEng.cpp" />
    <ClCompile Include="src\SpotLight.cpp" />
    <ClCompile Include="src\stb_image.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="include\SimiEng\Camera.h" />
    <ClInclude Include="include\SimiEng\DirLight.h" />
    <ClInclude Include="include\SimiEng\FPSCam.h" />
    <ClInclude Include="include\SimiEng\Mesh.h" />
    <ClInclude Include="include\SimiEng\Model.h" />
    <ClInclude Include="include\SimiEng\PointLight.h" />
    <ClInclude Include="include\SimiEng\Shader.h" />
    <ClInclude Include="include\SimiEng\SimiEng.h" />
    <ClInclude Include="include\SimiEng\SpotLight.h" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Shader\BlinnPhong.frag" />
    <None Include="Resources\Shader\BlinnPhong.vert" />
    <None Include="Resources\Shader\BlinnPhongCalculations.include" />
    <None Include="Resources\Shader\DirLight.include" />
    <None Include="Resources\Shader\DirLighting.frag" />
    <None Include="Resources\Shader\Light.include" />
    <None Include="Resources\Shader\LightCube.frag" />
    <None Include="Resources\Shader\LightCube.vert" />
    <None Include="Resources\Shader\Material.include" />
    <None Include="Resources\Shader\ModelMaterial.include" />
    <None Include="Resources\Shader\PhongShading.frag" />
    <None Include="Resources\Shader\PhongShading.vert" />
    <None Include="Resources\Shader\PointLight.include" />
    <None Include="Resources\Shader\PointLighting.frag" />
    <None Include="Resources\Shader\SpotLight.include" />
    <None Include="Resources\Shader\SpotLighting.frag" />
    <None Include="Resources\Shader\Texture.frag" />
    <None Include="Resources\Shader\Texture.vert" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>